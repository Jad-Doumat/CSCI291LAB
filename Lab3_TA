#include <stdio.h>
#include <stdbool.h>

#define SIZE 24
#define nRows 8
#define nCols 3

// Question 1 types
void print_array(int array[], int length);
void print_matrix(int mat[][nCols], int rows);
bool isValid(const int arr[], int length, int pos);
void remove_element(int arr[], int length, int pos);
void insert_element(int arr[], int length, int pos, int value);
void reshape(const int arr[], int length, int arr2d[][nCols]);
void trans_matrix(const int mat[][nCols], int mat_transp[][nRows]);
bool found_duplicate(int arr[], int length);


int main() {
    int arr[SIZE] = {1, 2, 3, 4, 5, 6, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24};
    int arr2d[nRows][nCols] = {{0}}; 
    int mat_transp[nCols][nRows] = {{0}}; 


    if (found_duplicate(arr, SIZE)) {
        printf("The array has duplicates.\n");
    } else {
        printf("The array has no duplicates.\n");
    }


    reshape(arr, SIZE, arr2d);


    printf("Original matrix:\n");
    print_matrix(arr2d, nRows);


    trans_matrix(arr2d, mat_transp);


    printf("\nTransposed matrix:\n");
    for (int i = 0; i < nCols; i++) {
        for (int j = 0; j < nRows; j++) {
            printf("mat_transp[%d][%d] = %d\n", i, j, mat_transp[i][j]);
        }
        puts("");
    }

    return 0;
}

bool isValid(const int arr[], int length, int pos) {
    return pos >= 0 && pos < length; 
}


void remove_element(int arr[], int length, int pos) {
    if (!isValid(arr, length, pos)) {
        printf("Position %d is invalid.\n", pos);
        return;
    }


    for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }


    arr[length - 1] = 0;

    printf("Element at position %d removed.\n", pos);
}


void insert_element(int arr[], int length, int pos, int value) {
    if (pos < 0 || pos > length) { 
        printf("Position %d is invalid.\n", pos);
        return;
    }


    for (int i = length; i > pos; i--) {
        arr[i] = arr[i - 1];
    }


    arr[pos] = value;

    printf("Element %d inserted at position %d.\n", value, pos);
}


void reshape(const int arr[], int length, int arr2d[][nCols]) {

    if (length != nRows * nCols) {
        printf("Error: Array length does not match the specified dimensions.\n");
        return;
    }


    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[col * nRows + row];
        }
    }
}


void trans_matrix(const int mat[][nCols], int mat_transp[][nRows]) {
    for (int i = 0; i < nRows; i++) {
        for (int j = 0; j < nCols; j++) {
            mat_transp[j][i] = mat[i][j];
        }
    }
}


bool found_duplicate(int arr[], int length) {
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if (arr[i] == arr[j]) {
                return true;
            }
        }
    }
    return false;
}


void print_array(int array[], int length) {
    for (int i = 0; i < length; i++) {
        printf("array[%d] = %d\n", i, array[i]);
    }
}


void print_matrix(int mat[][nCols], int rows) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < nCols; j++) {
            printf("mat[%d][%d] = %d\n", i, j, mat[i][j]);
        }
        puts("");
    }
}
